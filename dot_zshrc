function try_source { if [[ -e "$1" ]]; then source "$1"; fi }
function exists { command -v "$1" >/dev/null 2>&1; return $? }

# TODO: Support multiple additional imports
try_source "$ZSH_ADDITIONAL_IMPORTS"
try_source "$HOME/.iterm2_shell_integration.zsh"

if [[ -z "$DEFAULT_USER" ]]; then
  DEFAULT_USER=wesr
fi

# Set SSH information in a friendlier format
export SSH_PKEY="$HOME/.ssh/rsa_id"
export SESSION_TYPE="$(who -m | awk '{ print $2 }' | sed 's/[0-9]*$//')"
if [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]; then
  export SESSION_TYPE=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) export SESSION_TYPE=remote/ssh ;;
  esac
fi

# ------------------------------------------------------------------------------
# ----------- Run this check before setting up the rest of the shell -----------
# ------------ so that we don't do extra work if we're relaunching. ------------
# ------------------------------------------------------------------------------

if exists tmux; then
  if [[ -z "$TMUX" && ("$AUTO_TMUX_ALWAYS" == 'true' || "$SESSION_TYPE" == 'remote/ssh') ]]; then
    sid="$(tmux ls | sed '/(attached)$/d' | sed 's/:.*//' | tail -n 1)"
    if [[ -n "$ITERM_SHELL_INTEGRATION_INSTALLED" ]]; then
      export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=1
      tmux -CC ${sid:+attach} ${sid:+-t} $sid
    else
      tmux ${sid:+attach} ${sid:+-t} $sid
    fi
    exit
  fi
  alias detach='tmux detach'
fi

# ------------------------------------------------------------------------------
# ---------------- Remaining shell setup goes after this line. -----------------
# ------------------------------------------------------------------------------

if exists fzf; then
  export FZF_COMPLETION_TRIGGER='qq'
  export FZF_DEFAULT_COMMAND='rg --files --hidden --follow 2>/dev/null'
  export FZF_DEFAULT_OPTS="--height 40% --reverse --border"
  if [[ -f "$HOME/.fzf.zsh" ]]; then
    source "$HOME/.fzf.zsh"
  fi

  function fzf() {
    if [[ $(tput cols) > 100 ]]; then
      command fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                 echo {} is a binary file ||
                 (highlight -O ansi -l {} ||
                  coderay {} ||
                  rougify {} ||
                  cat {}) 2> /dev/null | head -255' "$@"
    else
      command fzf "$@"
    fi
  }

  alias fzh="fzf --history '${FZF_HISTORY_DIR:-TMPDIR}'"

  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
fi

export ZSH="$HOME/.oh-my-zsh"
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
  # Backup variables used in the OH MY ZSH that need to be restored
  ENV_HOME=$HOME
  ENV_ZSH_THEME=$ZSH_THEME
  ENV_ZSH=$ZSH
  ZSH="$HOME/.oh-my-zsh"

  export ZSH_DISABLE_COMPFIX=true
  export KEYTIMEOUT=1
  plugins=(extract git sudo vi-mode wd last-working-dir)

  if [[ "$OSTYPE" == "darwin"* ]]; then
    plugins+=(macos)
  fi

  if exists code; then
    plugins+=(vscode)
  fi

  if exists fzf; then
    plugins+=(fzf)
  fi

  try_source $ZSH/oh-my-zsh.sh

  # Restore environment variables
  ZSH=${ENV_ZSH:-$ZSH}
  HOME=${ENV_HOME:-$HOME}
  ZSH_THEME=${ENV_ZSH_THEME:-$ZSH_THEME}

  if exists brew; then
    if [[ -d "$(brew --prefix)/opt/spaceship/" ]] && source $(brew --prefix)/opt/spaceship/spaceship.zsh
  fi

  ZSH_THEME='spaceship'
  SPACESHIP_PROMPT_ADD_NEWLINE=false
  SPACESHIP_PROMPT_SEPARATE_LINE=true
  SPACESHIP_CHAR_SUFFIX=' '
  SPACESHIP_EXEC_TIME_ELAPSED=30
  SPACESHIP_DOCKER_COMPOSE_SHOW=false
fi

# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'

CASE_SENSITIVE='false'
HYPHEN_INSENSITIVE='true'
ENABLE_CORRECTION='true'
COMPLETION_WAITING_DOTS='true'
setopt globdots

function get-theme {
  # TODO: Add additional platform checks
  theme='dark'
  if [[ "$(uname -r | sed 's/.*-//')" == "WSL2" ]]; then
    theme="$(reg.exe Query 'HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize' /v AppsUseLightTheme | sed -e 's/0x0/dark/; s/0x1/light/' -e '/^[[:space:]]*$/d' | awk '{print $3}' | xargs)"
    # elif {{ MACOS }}; then
    #   theme="$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark || echo light)"
  fi
  echo "$theme"
}

function cd {
  if [[ "$#" == '0' ]]; then
    pushd "$HOME" > /dev/null
  else
    pushd "$@" > /dev/null
  fi
}

function od {
  popd "$@" > /dev/null
}

function .. {
  dir='..'
  times=${1:-1}
  while [[ $((times--)) > 1 ]]; do
    dir="$dir/.."
  done
  cd $dir
}

function kill-port {
    echo "Killing $(lsof -t -i tcp:$1 | wc -l) processes"
    lsof -t -i tcp:$1 | xargs kill -9
    echo "$(lsof -t -i tcp:$1 | wc -l) processes remaining"
}

[ -f /opt/homebrew/bin/brew ] && eval "$(/opt/homebrew/bin/brew shellenv)"
[ -f ~/.local/bin/mise ] && eval "$(~/.local/bin/mise activate zsh)"
[ -f ~/.config/op/plugins.sh ] && source "$HOME/.config/op/plugins.sh"

if exists nvim; then
  export EDITOR=nvim
  alias vim="$EDITOR"
else
  export EDITOR=vim
fi

alias e="$EDITOR"
alias ed="$EDITOR"
alias lg='lazygit'
alias gitk='gitk &'
alias beep='tput bel'
alias settings='ed ~/.zshrc'

export LESS="-F -X -R $LESS"

export SSH_COMMAND="$(which ssh)"
function ssh {
  if [[ -n "$ITERM_SHELL_INTEGRATION_INSTALLED" ]]; then
    export iterm2_hostname="${@:-1}"
    iterm2_print_state_data
    "$SSH_COMMAND" "$@"
    export iterm2_hostname="$(hostname)"
    iterm2_print_state_data
  else
    "$SSH_COMMAND" "$@"
  fi
}

if exists lazygit; then
  function lazygit {
    LAZY_THEME="$(get-theme)" command lazygit "$@"
  }
fi

if [ -d /mnt/c/QMK_MSYS ]; then
  # USB integrations on WSL are inadequate for QMK, use the Windows utils directly.
  export DFU_PROGRAMMER=/mnt/c/QMK_MSYS/mingw64/bin/dfu-programmer.exe
  export DFU_UTIL=/mnt/c/QMK_MSYS/mingw64/bin/dfu-util.exe
  export TEENSY_LOADER_CLI=/mnt/c/QMK_MSYS/mingw64/bin/teensy_loader_cli.exe
  export BATCHISP=/mnt/c/QMK_MSYS/mingw64/bin/batchisp.exe
fi

try_source "$HOME/.zshrc.after"
